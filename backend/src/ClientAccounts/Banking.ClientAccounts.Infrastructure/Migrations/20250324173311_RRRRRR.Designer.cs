// <auto-generated />
using System;
using Banking.ClientAccounts.Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Banking.ClientAccounts.Infrastructure.Migrations
{
    [DbContext(typeof(ReadDbContext))]
    [Migration("20250324173311_RRRRRR")]
    partial class RRRRRR
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ClientAccounts")
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Banking.BankAccounts.Contracts.Dto.AccountDto", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("Balance")
                        .HasColumnType("double precision")
                        .HasColumnName("balance");

                    b.Property<Guid>("ClientAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_account_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("PaymentDetails")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_details");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<int>("Сurrency")
                        .HasColumnType("integer")
                        .HasColumnName("сurrency");

                    b.HasKey("Id")
                        .HasName("pk_accounts");

                    b.ToTable("accounts", "ClientAccounts");
                });

            modelBuilder.Entity("Banking.BankAccounts.Contracts.Dto.CardDto", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<string>("Ccv")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ccv");

                    b.Property<Guid>("ClientAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_account_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean")
                        .HasColumnName("is_main");

                    b.Property<string>("PaymentDetails")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_details");

                    b.Property<DateTime>("ValidThru")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_thru");

                    b.HasKey("Id")
                        .HasName("pk_cards");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_cards_account_id");

                    b.ToTable("cards", "ClientAccounts");
                });

            modelBuilder.Entity("Banking.BankAccounts.Contracts.Dto.ClientAccountDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_account_id");

                    b.Property<int>("UserAccountType")
                        .HasColumnType("integer")
                        .HasColumnName("user_account_type");

                    b.HasKey("Id")
                        .HasName("pk_client_accounts");

                    b.ToTable("client_accounts", "ClientAccounts");
                });

            modelBuilder.Entity("Banking.BankAccounts.Contracts.Dto.AccountDto", b =>
                {
                    b.HasOne("Banking.BankAccounts.Contracts.Dto.ClientAccountDto", null)
                        .WithMany("Accounts")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_accounts_client_accounts_id");
                });

            modelBuilder.Entity("Banking.BankAccounts.Contracts.Dto.CardDto", b =>
                {
                    b.HasOne("Banking.BankAccounts.Contracts.Dto.AccountDto", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cards_accounts_account_id");

                    b.HasOne("Banking.BankAccounts.Contracts.Dto.ClientAccountDto", null)
                        .WithMany("Cards")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cards_client_accounts_id");
                });

            modelBuilder.Entity("Banking.BankAccounts.Contracts.Dto.ClientAccountDto", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
